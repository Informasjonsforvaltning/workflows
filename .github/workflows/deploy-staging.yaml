name: Deploy to staging

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      caller_sha:
        required: true
        type: string
      repo:
        required: true
        type: string
      java_version:
        required: false
        type: string
    secrets:
      GH_TOKEN:
        required: true


jobs:
  build-and-deploy:
    name: Build and deploy to staging environment when pull request is created
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: ${{ inputs.repo }}
        token: ${{ secrets.GH_TOKEN }}

    - name: Setup java jdk
      if: java_version
      uses: actions/setup-java@v1
      with:
        java-version: ${{ inputs.java_version }}

    - name: Auth gcloud CLI for image-store
      uses: google-github-actions/auth@main
      with:
        credentials_json: ${{ secrets.GCP_SA_DIGDIR_FDK_GCR_KEY }}

    - name: Configure docker to use the gcloud command-line tool as a credential helper
      run: gcloud auth configure-docker eu.gcr.io

    - name: Package & run tests with maven
      run: mvn clean install --no-transfer-progress
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ inputs.caller_sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: eu.gcr.io/digdir-fdk-infra/${{ inputs.app_name }}
        flavor: |
          latest=false
        tags: |
          type=raw,value=staging_latest
          type=raw,value=${{ github.sha }},priority=1000
          type=ref,event=branch

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        build-args:  |
          GITHUB_TOKEN=${{ secrets.GH_TOKEN }}

    - name: Apply Helm template
      run: |
        helm repo add fdk https://informasjonsforvaltning.github.io/helm-chart/
        helm fetch --untar --untardir ./helm fdk/${{ inputs.app_name }}
        helm template --set DOCKER_IMAGE_NAME="eu.gcr.io/digdir-fdk-infra/${{ inputs.app_name }}:${{ inputs.caller_sha }}" \
        -f ./helm/${{ inputs.app_name }}/values/staging.yaml \
        ./helm/${{ inputs.app_name }}/ > ./kubectlapply.yaml
        chmod o+w ./kubectlapply.yaml
        cat kubectlapply.yaml

    - name: Auth gcloud CLI for deploy
      uses: google-github-actions/auth@main
      with:
        credentials_json: ${{ secrets.DIGDIR_FDK_DEV_AUTODEPLOY }}

    - name: Deploy to GCP & check status
      run: |
        gcloud container clusters get-credentials digdir-fdk-dev --region europe-north1-a --project digdir-fdk-dev
        kubectl apply -f ./kubectlapply.yaml --force
        if ! kubectl --namespace=staging rollout status deployment ${{ inputs.app_name }}; then
          kubectl --namespace=staging rollout undo deployment ${{ inputs.app_name }}
          kubectl --namespace=staging rollout status deployment ${{ inputs.app_name }}
          exit 1
        fi

#    - name: Notify slack
#      uses: 8398a7/action-slack@v3
#      with:
#        status: ${{ job.status }}
#        author_name: 'Application: ${{ inputs.app_name }} | Environment: staging'
#        fields: commit,author,workflow
#      env:
#        GITHUB_TOKEN: ${{ github.token }}
#        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#      if: always()
