name: Reusable build & publish

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      build_env:
        required: false
        type: boolean
      build_env_name:
        required: false
        type: string
      build_env_value:
        required: false
        type: string
      build_context:
        required: false
        type: string
        default: ./
      cache_path:
        required: false
        type: string
      cache_key:
        required: false
        type: string
      coverage_file_path:
        required: false
        type: string
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      environment:
        required: true
        type: string
      gh_environment:
        required: false
        type: string
        default: ''
      java_version:
        required: false
        type: string
      monorepo_app:
        required: false
        type: boolean
        default: false
    secrets:
      GH_TOKEN:
        required: true
      CODECOV_TOKEN:
        required: false

jobs:
  build:
    name: Build, test, publish ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Restoring Cache
        uses: actions/cache@v4
        if: ${{ inputs.cache_path != '' && inputs.cache_key != '' }}
        with:
          path: ${{ inputs.cache_path }}
          key: ${{ inputs.cache_key }}

      - name: Lowercase repository name
        run: |
          echo "REPO=${GITHUB_REPOSITORY@L}" >> $GITHUB_ENV

      - name: Create image name if monorepo
        if: ${{ inputs.monorepo_app }}
        run: echo "IMAGE_NAME=ghcr.io/${REPO}/${{ inputs.app_name }}" >> $GITHUB_ENV

      - name: Create image name if not monorepo
        if: ${{ !inputs.monorepo_app }}
        run: echo "IMAGE_NAME=ghcr.io/${REPO}" >> $GITHUB_ENV

      - name: Setup java jdk
        if: ${{ inputs.java_version }}
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ inputs.java_version }}

      - name: Coverage test
        if: ${{ inputs.coverage_file_path }}
        run: mvn clean verify --no-transfer-progress

      - name: Coverage upload
        if: ${{ inputs.coverage_file_path }}
        uses: codecov/codecov-action@v5
        with:
          files: ${{ inputs.coverage_file_path }}
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Login to GitHub Container Registry
        id: login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Skip java tests if coverage has been run
        if: ${{ inputs.coverage_file_path && inputs.java_version }}
        run: echo "skip_tests=-DskipTests" >> $GITHUB_ENV

      - name: Package & run tests with maven
        if: ${{ inputs.java_version }}
        run: mvn clean install --no-transfer-progress ${{ env.skip_tests }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Meta input
        if: ${{ inputs.environment == 'prod' }}
        run: |
          echo "image_tag=latest" >> $GITHUB_ENV
          echo "meta_flavor=true" >> $GITHUB_ENV

      - name: Meta input if not prod
        if: ${{ inputs.environment != 'prod' }}
        run: |
          echo "image_tag=${{ inputs.environment }}_latest" >> $GITHUB_ENV
          echo "meta_flavor=false" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ env.meta_flavor }}
          tags: |
            type=raw,value=${{ env.image_tag }}
            type=raw,value=${{ github.sha }},priority=1000
            type=ref,event=branch         

      - name: Build and push
        if: ${{ !inputs.build_env }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.build_context }}${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          provenance: false
          build-args:  |
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}

      - name: Build (with build env) and push
        if: ${{ inputs.build_env }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.build_context }}${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          provenance: false
          build-args:  |
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
            ${{ inputs.build_env_name }}=${{ inputs.build_env_value }}
