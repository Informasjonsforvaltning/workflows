name: Reusable build & publish

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      build_env:
        required: false
        type: boolean
      build_env_name:
        required: false
        type: string
      build_env_value:
        required: false
        type: string
      build_context:
        required: false
        type: string
        default: ./
      cache_path:
        required: false
        type: string
      cache_key:
        required: false
        type: string  
      caller_sha:
        required: false
        type: string
        default: ${{ github.sha }}
      dockerfile:
        required: false
        type: string
        default: Dockerfile
      environment:
        required: true
        type: string
      repo:
        required: false
        type: string
        default: ${{ github.repository }}
    secrets:
      GH_TOKEN:
        required: true
      GCP_SA_DIGDIR_FDK_GCR_KEY:
        required: true

jobs:
  build:
    name: Build, test, publish ${{ inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Restoring Cache
        uses: actions/cache@v3
        if: ${{ inputs.cache_path != '' && inputs.cache_key != '' }}
        with:
          path: ${{ inputs.cache_path }}
          key: ${{ inputs.cache_key }}

      - name: Create short sha
        run: echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Auth gcloud CLI for image-store
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_DIGDIR_FDK_GCR_KEY }}

      - name: Configure docker to use the gcloud command-line tool as a credential helper
        run: gcloud auth configure-docker eu.gcr.io

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: .cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Meta input
        if: ${{ inputs.environment == 'prod' }}
        run: |
          echo "image_tag=latest" >> $GITHUB_ENV
          echo "meta_flavor=true" >> $GITHUB_ENV

      - name: Meta input if not prod
        if: ${{ inputs.environment != 'prod' }}
        run: |
          echo "image_tag=${{ inputs.environment }}_latest" >> $GITHUB_ENV
          echo "meta_flavor=false" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: eu.gcr.io/digdir-fdk-infra/${{ inputs.app_name }}
          flavor: |
            latest=${{ env.meta_flavor }}
          tags: |
            type=raw,value=${{ env.image_tag }}
            type=raw,value=${{ github.sha }},priority=1000
            type=ref,event=branch         

      - name: Build and push
        if: ${{ !inputs.build_env }}
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.build_context }}${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          provenance: false
          build-args:  |
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}

      - name: Build (with build env) and push
        if: ${{ inputs.build_env }}
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.build_context }}${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          provenance: false
          build-args:  |
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
            ${{ inputs.build_env_name }}=${{ inputs.build_env_value }}
