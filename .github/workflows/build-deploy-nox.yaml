name: Reusable nox build, test, publish & deploy

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      cluster:
        required: true
        type: string
      dockerfile:
        required: false
        type: string
        default: ./Dockerfile
      dockerfile_context:
        required: false
        type: string
        default: ./
      environment:
        required: true
        type: string
      gh_environment:
        required: false
        type: string
        default: ''
      monorepo_app:
        required: false
        type: boolean
        default: false
      node_version:
        required: false
        type: number
        default: 0
      nox_cmd:
        required: false
        type: string
      nox_env:
        required: false
        type: number
        default: 0
      nox_env_1_name:
        required: false
        type: string
        default: default_1
      nox_env_2_name:
        required: false
        type: string
        default: default_2
      nox_env_3_name:
        required: false
        type: string
        default: default_3
      nox_env_4_name:
        required: false
        type: string
        default: default_4
      nox_image:
        required: false
        type: boolean
      python_version:
        required: true
        type: string
      python_architecture:
        required: true
        type: string
      run_safety:
        required: false
        type: boolean
      set_es_map_count:
        required: false
        type: boolean
      snapshot_disk:
        required: false
        type: string
      snapshot_name:
        required: false
        type: string
      snapshot_zone:
        required: false
        type: string
    secrets:
      GH_TOKEN:
        required: true
      DIGDIR_FDK_AUTODEPLOY:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      DEPENDABOT_SLACK_WEBHOOK_URL:
        required: false
      NOX_ENV_1_VALUE:
        required: false
      NOX_ENV_2_VALUE:
        required: false
      NOX_ENV_3_VALUE:
        required: false
      NOX_ENV_4_VALUE:
        required: false

jobs:
  build-and-deploy:
    name: Build, test, publish and deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.gh_environment }}
    env:
      notify_all: ''
      slack_webhook: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GH_TOKEN }}

      - name: Create short sha
        run: echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Lowercase repository name
        run: |
          echo "REPO=${GITHUB_REPOSITORY@L}" >> $GITHUB_ENV

      - name: Create image name if monorepo
        if: ${{ inputs.monorepo_app }}
        run: echo "IMAGE_NAME=ghcr.io/${REPO}/${{ inputs.app_name }}" >> $GITHUB_ENV

      - name: Create image name if not monorepo
        if: ${{ !inputs.monorepo_app }}
        run: echo "IMAGE_NAME=ghcr.io/${REPO}" >> $GITHUB_ENV

      - name: Set slack webhook if dependabot
        if: github.actor == 'dependabot[bot]'
        run: echo "slack_webhook=${{ secrets.DEPENDABOT_SLACK_WEBHOOK_URL }}" >> $GITHUB_ENV

      - name: Set event vars if PR
        if: github.event_name == 'pull_request'
        run: |
          echo "event_path=pull/${{ github.event.number }}" >> $GITHUB_ENV
          echo "event_text=Pull request" >> $GITHUB_ENV
          echo "event_name=${{ github.head_ref }}" >> $GITHUB_ENV

      - name: Set event vars if push
        if: github.event_name == 'push'
        run: |
          echo "event_path=commit/${{ github.sha }}" >> $GITHUB_ENV
          echo "event_text=Push" >> $GITHUB_ENV
          echo "event_name=${{ github.event.head_commit.message }}" | sed 1q >> $GITHUB_ENV

      - name: Set env vars if none of the above
        if: github.event_name != 'pull_request' && github.event_name != 'push'
        run: |
          echo "event_path=commit/${{ github.sha }}" >> $GITHUB_ENV
          echo "event_text=${{ github.event_name }}" >> $GITHUB_ENV
          echo "event_name=${{ github.event.head_commit.message }}" | sed 1q >> $GITHUB_ENV

      - name: Set up node (if required)
        if: ${{ inputs.node_version > 0 }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
          architecture: ${{ inputs.python_architecture}}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: .cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Meta input
        if: ${{ inputs.environment == 'prod' }}
        run: |
          echo "image_tag=latest" >> $GITHUB_ENV
          echo "meta_flavor=true" >> $GITHUB_ENV

      - name: Meta input if not prod
        if: ${{ inputs.environment != 'prod' }}
        run: |
          echo "image_tag=${{ inputs.environment }}_latest" >> $GITHUB_ENV
          echo "meta_flavor=false" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          flavor: |
            latest=${{ env.meta_flavor }}
          tags: |
            type=raw,value=${{ env.image_tag }}
            type=raw,value=${{ github.sha }},priority=1000
            type=ref,event=branch

      - name: Install dependencies
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip install --constraint=.github/workflows/constraints.txt pipx
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry

      - name: Run safety
        id: safety
        if: ${{ github.event_name == 'pull_request' &&  inputs.run_safety }}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "result<<$EOF" >> $GITHUB_OUTPUT
          nox -s safety >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR with safety result
        if: ${{ github.event_name == 'pull_request' && inputs.run_safety && github.actor != 'dependabot[bot]' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          header: Safety result
          message: |
            ```
            ${{ steps.safety.outputs.result }}
            ```

      - name: Set max map count for elasticsearch if needed
        if: ${{ inputs.set_es_map_count }}
        run: sudo sysctl -w vm.max_map_count=262144

      - name: Run tests with nox and no input variables
        if: ${{ inputs.nox_env == 0 }}
        run: nox --no-reuse-existing-virtualenvs ${{ inputs.nox_cmd }}

      - name: Run tests with nox and one input env
        if: ${{ inputs.nox_env == 1 }}
        run: nox --no-reuse-existing-virtualenvs ${{ inputs.nox_cmd }}
        env:
          ${{ inputs.nox_env_1_name }}: ${{ secrets.NOX_ENV_1_VALUE }}

      - name: Run tests with nox and two input env
        if: ${{ inputs.nox_env == 2 }}
        run: nox --no-reuse-existing-virtualenvs ${{ inputs.nox_cmd }}
        env:
          ${{ inputs.nox_env_1_name }}: ${{ secrets.NOX_ENV_1_VALUE }}
          ${{ inputs.nox_env_2_name }}: ${{ secrets.NOX_ENV_2_VALUE }}

      - name: Run tests with nox and three input env
        if: ${{ inputs.nox_env == 3 }}
        run: nox --no-reuse-existing-virtualenvs ${{ inputs.nox_cmd }}
        env:
          ${{ inputs.nox_env_1_name }}: ${{ secrets.NOX_ENV_1_VALUE }}
          ${{ inputs.nox_env_2_name }}: ${{ secrets.NOX_ENV_2_VALUE }}
          ${{ inputs.nox_env_3_name }}: ${{ secrets.NOX_ENV_3_VALUE }}

      - name: Run tests with nox and four input env
        if: ${{ inputs.nox_env == 4 }}
        run: nox --no-reuse-existing-virtualenvs ${{ inputs.nox_cmd }}
        env:
          ${{ inputs.nox_env_1_name }}: ${{ secrets.NOX_ENV_1_VALUE }}
          ${{ inputs.nox_env_2_name }}: ${{ secrets.NOX_ENV_2_VALUE }}
          ${{ inputs.nox_env_3_name }}: ${{ secrets.NOX_ENV_3_VALUE }}
          ${{ inputs.nox_env_4_name }}: ${{ secrets.NOX_ENV_4_VALUE }}

      - name: Login to GitHub Container Registry
        id: login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Tag and publish docker image to Google Cloud if built by nox
        if: ${{ inputs.nox_image }}
        run: |
          docker tag ${{ env.IMAGE_NAME }}:test ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.IMAGE_NAME }}:test ${{ env.IMAGE_NAME }}:${{ env.image_tag }}
          docker rmi ${{ env.IMAGE_NAME }}:test
          docker -- push ${{ env.IMAGE_NAME }} -a

      - name: Build and push image if not handled by nox
        if: ${{ !inputs.nox_image }}
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.dockerfile_context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
          provenance: false
          build-args: |
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}

      - name: Apply Helm template
        run: |
          helm repo add fdk https://informasjonsforvaltning.github.io/helm-chart/
          helm fetch --untar --untardir ./helm fdk/${{ inputs.app_name }}
          helm template --set DOCKER_IMAGE_NAME="${{ env.IMAGE_NAME }}:${{ github.sha }}" \
          -f ./helm/${{ inputs.app_name }}/values/${{ inputs.environment }}.yaml \
          ./helm/${{ inputs.app_name }}/ > ./kubectlapply.yaml
          chmod o+w ./kubectlapply.yaml
          cat kubectlapply.yaml

      - name: Auth gcloud CLI for deploy
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.DIGDIR_FDK_AUTODEPLOY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      - name: Get credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ inputs.cluster }}
          location: europe-north1-a

      - name: Create snapshot if needed
        if: ${{ inputs.snapshot_disk }}
        run: |
          gcloud compute --project ${{ inputs.cluster }} disks snapshot "${{ inputs.snapshot_disk }}" \
          --snapshot-names "${{ inputs.snapshot_name }}-${{ env.SHORT_SHA }}" --zone "${{ inputs.snapshot_zone }}" &
          wait
          gcloud compute --project ${{ inputs.cluster }} snapshots add-labels "${{ inputs.snapshot_name }}-${{ env.SHORT_SHA }}" \
          --labels="snapshotdays="14""

      - name: Deploy to GCP & check status
        run: |
          kubectl apply -f ./kubectlapply.yaml --force
          if ! kubectl --namespace=${{ inputs.environment }} rollout status deployment ${{ inputs.app_name }}; then
            kubectl --namespace=${{ inputs.environment }} rollout undo deployment ${{ inputs.app_name }}
            kubectl --namespace=${{ inputs.environment }} rollout status deployment ${{ inputs.app_name }}
            exit 1
          fi

      - name: Set slack message (if success)
        if: always() && job.status == 'success'
        run: |
          echo "slack_emoji=:white_check_mark:" >> $GITHUB_ENV
          echo "slack_text=Succeeded" >> $GITHUB_ENV
          echo "slack_color=#2eb886" >> $GITHUB_ENV

      - name: Set slack message (if failure)
        if: always() && job.status == 'failure'
        run: |
          echo "slack_emoji=:no_entry:" >> $GITHUB_ENV
          echo "slack_text=Failed" >> $GITHUB_ENV
          echo "slack_color=#a30200" >> $GITHUB_ENV

      - name: Notify all if failure in prod-workflow
        if: always() && job.status == 'failure' && inputs.environment == 'prod'
        run: echo "notify_all=@channel " >> $GITHUB_ENV

      - name: Set slack message (if cancelled)
        if: always() && job.status == 'cancelled'
        run: |
          echo "slack_emoji=:warning:" >> $GITHUB_ENV
          echo "slack_text=Cancelled" >> $GITHUB_ENV
          echo "slack_color=#daa038" >> $GITHUB_ENV

      - name: Notify slack
        id: slack
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ env.slack_color }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "${{ env.notify_all }}${{ env.slack_emoji }} ${{ env.slack_text }} GitHub Actions\n*Application:* ${{ inputs.app_name }}\n*Environment:* ${{ inputs.environment }}"
                      },
                      "fields": [
                        {
                            "type": "mrkdwn",
                            "text": "*commit:* \n<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }} | ${{ env.SHORT_SHA }} >"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "*author:* \n${{ github.actor }}"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "*workflow:* \n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} | ${{ github.workflow }}>"
                        },
                        {
                            "type": "mrkdwn",
                            "text": "*${{ env.event_text }}:* \n<${{ github.server_url }}/${{ github.repository }}/${{ env.event_path }} | ${{ env.event_name }}>"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ env.slack_webhook }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        if: always()
